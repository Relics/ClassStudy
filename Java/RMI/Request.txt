二、实验二
1、 实验名称及学时数
基于RMI的分布式议程服务3学时
2、 实验目的
熟练掌握和运用Java RMI 技术，同时要熟练使用stub下载、Java安全管理器、客户回
调。
3、 实验内容
(1)  使用Java RMI 构建一个分布式议程服务（agenda service）。不同的客户应能连接
到这一共享的议程服务，并查询、添加和删除议程中的会晤（meeting）安排。服
务程序应具备新用户注册、清除某一用户所有会晤安排等管理功能。
4、 实验环境
(1)  Windows XP/NT/2000 
(2)  Eclipse 
5、 实验要求
(1)  功能性需求
本实验要求完成的分布式议程服务至少应实现如下列出的功能。这些功能在服务端
运行，并且均可由客户程序远程访问。
功能1、用户注册
	允许新的用户注册到议程服务中。注册新用户时，应为该用户提供一个唯一的用户
	名以及一个密码。如果注册时提供的用户名已由其他用户使用，应反馈一个出错信息。
	成功注册后，亦应反馈一个成功注册的信息。
功能2、添加会晤
	已注册的用户可以添加会晤到其议程安排中。会晤只允许在两个已注册的用户之间
	举行，用户不可以创建没有另一已注册用户的会晤。添加会晤时提供的参数应包括会晤
	的起始时间（starttime）和终止时间（endtime）、一个描述本次会晤的标签（description 
	label）以及预约的另一用户的名字（book user 或schedule user）。在成功添加会晤后，
	它应即时出现在发起该会晤的用户议程中以及该会晤所预约的另一用户的议程中。
	用户不允许重复预约另一用户，即同一用户不可以向另一用户发起两次会晤。用户
	不允许有重复的会晤，即如果被预约的用户已有一个会晤安排与新会晤在时间上相同，
	将会导致一个错误而无法添加这一新会晤。用户在添加新会晤后应获得反馈信息，以便
	得知是否成功添加了新会晤。
功能3、查询会晤
	已注册的用户可以查询自己的议程中某一时间段（time interval）的所有会晤安排。
	查询会晤时提供的参数应包括所关注时间段的起始时间和终止时间；查询结果返回该用
	户议程中在指定时间范围内找到的所有会晤安排的列表，在列表中给出每一会晤的起始
	时间、终止时间、描述标签以及被预约的另一用户的名字。
	注意：查询会晤的结果既应该包括用户作为发起人的那些会晤，也应该包括用户作
	为被预约人的那些会晤。
功能4、删除会晤
	已注册的用户可以删除自己创建的某一会晤安排。删除会晤时，提供的参数除了执
	行删除功能的用户的名字以及密码外，还包括一个能唯一标识待删的会晤的参数（提示：
	可以给会晤赋予一个唯一的标识位，简单地以会晤的标识位来删除）。
功能5、清除会晤
	已注册的用户可以清除自己创建的所有会晤安排。 
(2)  编写一个基于命令行交互的客户程序来访问分布式议程服务。客户程序通过命令行
参数访问远程服务。
(3)  严格按照编码规范进行编码实现。（请到服务器上下载）；
(4)  按照面向对象的编程思想来设计和实现；
(5)  提交的结果包括：
?  源代码
?  编译运行与调试有关文件
i.  编译所有源代码并创建stub的脚本文件build.bat；
ii.  在客户端注册若干新用户的脚本文件register.bat；
iii.  在客户端添加若干新会晤的脚本文件add.bat；
iv.  在客户端查询若干会晤的脚本文件query.bat；
v.  在客户端删除若干会晤的脚本文件delete.bat；
vi.  在客户端清除会晤的脚本文件clear.bat；
?  其他文档：
i.  在doc子目录中存放上述源代码生成的javadoc文档；
ii.  关于实验完成人、提交结果描述等补充说明readme.txt。
(6)  填写实验报告（格式见附件一）。
6、 实验步骤 